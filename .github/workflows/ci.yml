name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tasks/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tasks/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.24.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: go.sum

    - name: Verify dependencies
      run: go mod verify

    - name: Check formatting
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install staticcheck
      if: matrix.os == 'ubuntu-latest'
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      if: matrix.os == 'ubuntu-latest'
      run: staticcheck ./...

    - name: Run tests
      run: go test -short -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run benchmarks
      if: matrix.os == 'ubuntu-latest'
      run: go test -bench=. -benchmem ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-report.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-report.sarif

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

  integration-test:
    name: Integration Tests with S3
    runs-on: ubuntu-latest
    services:
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          MINIO_DEFAULT_BUCKETS: groxpi-test
        ports:
          - 9000:9000
        options: --health-cmd "curl -f http://127.0.0.1:9000/minio/health/ready || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      TEST_S3_ENDPOINT: 127.0.0.1:9000
      TEST_S3_ACCESS_KEY: minioadmin
      TEST_S3_SECRET_KEY: minioadmin
      TEST_S3_BUCKET: groxpi-test
      TEST_S3_USE_SSL: false
      TEST_S3_FORCE_PATH_STYLE: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true
        cache-dependency-path: go.sum

    - name: Wait for MinIO
      run: |
        echo "Waiting for MinIO to be ready..."
        for i in {1..30}; do
          if curl -f http://127.0.0.1:9000/minio/health/ready 2>/dev/null; then
            echo "MinIO is ready!"
            break
          fi
          echo "Attempt $i: MinIO not ready yet..."
          sleep 2
        done

    - name: Build groxpi binary
      run: go build -o groxpi cmd/groxpi/main.go

    - name: Run S3 integration tests
      run: |
        # Run only S3-specific integration tests
        go test -race -v -run "TestS3" ./internal/storage/

  uv-integration-test:
    name: UV Package Manager Integration Tests
    runs-on: ubuntu-latest
    services:
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
          MINIO_DEFAULT_BUCKETS: groxpi-test
        ports:
          - 9000:9000
        options: --health-cmd "curl -f http://127.0.0.1:9000/minio/health/ready || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      TEST_S3_ENDPOINT: 127.0.0.1:9000
      TEST_S3_ACCESS_KEY: minioadmin
      TEST_S3_SECRET_KEY: minioadmin
      TEST_S3_BUCKET: groxpi-test
      TEST_S3_USE_SSL: false
      TEST_S3_FORCE_PATH_STYLE: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true
        cache-dependency-path: go.sum

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Pull UV Docker image
      run: docker pull ghcr.io/astral-sh/uv:latest

    - name: Wait for MinIO
      run: |
        echo "Waiting for MinIO to be ready..."
        for i in {1..30}; do
          if curl -f http://127.0.0.1:9000/minio/health/ready 2>/dev/null; then
            echo "MinIO is ready!"
            break
          fi
          echo "Attempt $i: MinIO not ready yet..."
          sleep 2
        done

    - name: Build groxpi binary
      run: go build -o groxpi cmd/groxpi/main.go

    - name: Run UV integration tests
      run: |
        export CI=1
        export GROXPI_BINARY=./groxpi
        ./tests/uv_s3_integration_test.sh

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, integration-test, uv-integration-test, security, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Build binary
      run: |
        go build -ldflags="-s -w" -o groxpi cmd/groxpi/main.go
        ./groxpi --version || echo "Version check not available"

    - name: Test Docker build
      run: docker build -t groxpi:test .