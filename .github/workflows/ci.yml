name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tasks/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tasks/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.24.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: go.sum

    - name: Verify dependencies
      run: go mod verify

    - name: Check formatting
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install staticcheck
      if: matrix.os == 'ubuntu-latest'
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      if: matrix.os == 'ubuntu-latest'
      run: staticcheck ./...

    - name: Run tests
      run: go test -short -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run benchmarks
      if: matrix.os == 'ubuntu-latest'
      run: go test -bench=. -benchmem ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out gosec-report.sarif -exclude-generated ./...
        # Remove fixes array from SARIF to avoid GitHub validation errors
        if [ -f gosec-report.sarif ]; then
          # Use jq to remove the fixes field from all results
          jq 'del(.runs[].results[].fixes)' gosec-report.sarif > gosec-report-clean.sarif
          mv gosec-report-clean.sarif gosec-report.sarif
        fi

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-report.sarif

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

  s3-integration-test:
    name: S3 Integration Tests
    runs-on: ubuntu-latest

    env:
      TEST_S3_ENDPOINT: 127.0.0.1:9000
      TEST_S3_ACCESS_KEY: minioadmin
      TEST_S3_SECRET_KEY: minioadmin
      TEST_S3_BUCKET: groxpi-test
      TEST_S3_USE_SSL: false
      TEST_S3_FORCE_PATH_STYLE: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true
        cache-dependency-path: go.sum

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Start MinIO
      run: |
        docker run -d \
          --name minio \
          -p 9000:9000 \
          -p 9001:9001 \
          -e MINIO_ROOT_USER=minioadmin \
          -e MINIO_ROOT_PASSWORD=minioadmin \
          quay.io/minio/minio:latest \
          server /data --console-address ":9001"

        echo "Waiting for MinIO to be ready..."
        for i in {1..30}; do
          if curl -f http://127.0.0.1:9000/minio/health/live 2>/dev/null; then
            echo "MinIO is ready!"
            break
          fi
          echo "Attempt $i: MinIO not ready yet..."
          sleep 2
        done

        # Create the test bucket
        docker exec minio sh -c "mc alias set local http://localhost:9000 minioadmin minioadmin && mc mb local/groxpi-test || true"

    - name: Build groxpi binary
      run: go build -o groxpi cmd/groxpi/main.go

    - name: Run S3 integration tests
      run: |
        # Run the simplified S3 integration tests
        go test -race -v -run "TestS3" ./internal/storage/ -timeout=10m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, s3-integration-test, security, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Build binary
      run: |
        go build -ldflags="-s -w" -o groxpi cmd/groxpi/main.go
        ls -la groxpi
        echo "Binary built successfully"

    - name: Test Docker build
      run: docker build -t groxpi:test .